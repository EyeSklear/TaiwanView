{"version":3,"sources":["../../../src/terrain/terrain-cover.ts"],"names":["createRenderTarget","joinLayerBounds","makeViewport","getRenderBounds","TerrainCover","constructor","targetLayer","tile","getTile","id","isActive","Boolean","getCurrentLayer","shouldUpdate","viewport","layers","layerNeedsRedraw","sizeChanged","_updateViewport","layersChanged","_updateLayers","needsRedraw","getIntersectingLayers","length","i","map","layer","shouldRedraw","targetBounds","getBounds","targetBoundsCommon","newZoom","Math","ceil","zoom","bounds","oldZoom","renderViewport","newBounds","oldBounds","some","x","getRenderFramebuffer","fbo","context","gl","getPickingFramebuffer","props","pickable","pickingFbo","filterLayers","filter","includes","delete","texture","sourceTile","intersect","bbox","parent","b1","b2","west","east","south","north","left","right","top","bottom"],"mappings":"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","sourcesContent":["import {Framebuffer} from '@luma.gl/core';\n\nimport type {Layer, Viewport} from '@deck.gl/core';\n\nimport {createRenderTarget} from './utils';\nimport {joinLayerBounds, makeViewport, getRenderBounds, Bounds} from '../utils/projection-utils';\n\n// TODO - import from loaders when Tileset2D is split out\ntype GeoBoundingBox = {west: number; north: number; east: number; south: number};\ntype NonGeoBoundingBox = {left: number; top: number; right: number; bottom: number};\ntype Tile2DHeader = {\n  bbox: GeoBoundingBox | NonGeoBoundingBox;\n};\n\n/**\n * Manages the lifecycle of the terrain cover (draped textures over a terrain mesh).\n * One terrain cover is created for each unique terrain layer (primitive layer with operation:terrain).\n * It is updated when the terrain source layer's mesh changes or when any of the terrainDrawMode:drape\n * layers requires redraw.\n * During the draw call of a terrain layer, the drape texture is overlaid on top of the layer's own color.\n */\nexport class TerrainCover {\n  isDirty: boolean = true;\n  /** The terrain layer that this instance belongs to */\n  targetLayer: Layer;\n  /** Viewport used to draw into the texture */\n  renderViewport: Viewport | null = null;\n  /** Bounds of the terrain cover texture, in cartesian space */\n  bounds: Bounds | null = null;\n\n  private fbo?: Framebuffer;\n  private pickingFbo?: Framebuffer;\n  private layers: string[] = [];\n  private tile: Tile2DHeader | null;\n  /** Cached version of targetLayer.getBounds() */\n  private targetBounds: [number[], number[]] | null = null;\n  /** targetBounds in cartesian space */\n  private targetBoundsCommon: Bounds | null = null;\n\n  constructor(targetLayer: Layer) {\n    this.targetLayer = targetLayer;\n    this.tile = getTile(targetLayer);\n  }\n\n  get id() {\n    return this.targetLayer.id;\n  }\n\n  /** returns true if the target layer is still in use (i.e. not finalized) */\n  get isActive(): boolean {\n    return Boolean(this.targetLayer.getCurrentLayer());\n  }\n\n  shouldUpdate({\n    targetLayer,\n    viewport,\n    layers,\n    layerNeedsRedraw\n  }: {\n    targetLayer?: Layer;\n    viewport?: Viewport;\n    layers?: Layer[];\n    layerNeedsRedraw?: Record<string, boolean>;\n  }): boolean {\n    if (targetLayer) {\n      this.targetLayer = targetLayer;\n    }\n    const sizeChanged = viewport ? this._updateViewport(viewport) : false;\n\n    let layersChanged = layers ? this._updateLayers(layers) : false;\n\n    if (layerNeedsRedraw) {\n      for (const id of this.layers) {\n        if (layerNeedsRedraw[id]) {\n          layersChanged = true;\n          // console.log('layer needs redraw', id);\n          break;\n        }\n      }\n    }\n\n    return layersChanged || sizeChanged;\n  }\n\n  /** Compare layers with the last version. Only rerender if necessary. */\n  private _updateLayers(layers: Layer[]): boolean {\n    let needsRedraw = false;\n    layers = this.tile ? getIntersectingLayers(this.tile, layers) : layers;\n\n    if (layers.length !== this.layers.length) {\n      needsRedraw = true;\n      // console.log('layers count changed', this.layers.length, '>>', layers.length);\n    } else {\n      for (let i = 0; i < layers.length; i++) {\n        const id = layers[i].id;\n        if (id !== this.layers[i]) {\n          needsRedraw = true;\n          // console.log('layer added/removed', id);\n          break;\n        }\n      }\n    }\n    if (needsRedraw) {\n      this.layers = layers.map(layer => layer.id);\n    }\n    return needsRedraw;\n  }\n\n  /** Compare viewport and terrain bounds with the last version. Only rerender if necesary. */\n  private _updateViewport(viewport: Viewport): boolean {\n    const targetLayer = this.targetLayer;\n    let shouldRedraw = false;\n\n    if (this.targetBounds !== targetLayer.getBounds()) {\n      // console.log('bounds changed', this.bounds, '>>', newBounds);\n      shouldRedraw = true;\n      this.targetBounds = targetLayer.getBounds();\n      this.targetBoundsCommon = joinLayerBounds([targetLayer], viewport);\n    }\n\n    if (!this.targetBoundsCommon) {\n      return false;\n    }\n\n    const newZoom = Math.ceil(viewport.zoom + 0.5);\n    // If the terrain layer is bound to a tile, always render a texture that cover the whole tile.\n    // Otherwise, use the smaller of layer bounds and the viewport bounds.\n    if (this.tile) {\n      this.bounds = this.targetBoundsCommon;\n    } else {\n      const oldZoom = this.renderViewport?.zoom;\n      shouldRedraw = shouldRedraw || newZoom !== oldZoom;\n      const newBounds = getRenderBounds(this.targetBoundsCommon, viewport);\n      const oldBounds = this.bounds;\n      shouldRedraw = shouldRedraw || !oldBounds || newBounds.some((x, i) => x !== oldBounds[i]);\n      this.bounds = newBounds;\n    }\n\n    if (shouldRedraw) {\n      this.renderViewport = makeViewport({\n        bounds: this.bounds,\n        zoom: newZoom,\n        viewport\n      });\n    }\n\n    return shouldRedraw;\n  }\n\n  getRenderFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || this.layers.length === 0) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.targetLayer.context.gl, {id: this.id});\n    }\n    return this.fbo;\n  }\n\n  getPickingFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || (this.layers.length === 0 && !this.targetLayer.props.pickable)) {\n      return null;\n    }\n    if (!this.pickingFbo) {\n      this.pickingFbo = createRenderTarget(this.targetLayer.context.gl, {id: `${this.id}-picking`});\n    }\n    return this.pickingFbo;\n  }\n\n  filterLayers(layers: Layer[]) {\n    return layers.filter(({id}) => this.layers.includes(id));\n  }\n\n  delete() {\n    const {fbo, pickingFbo} = this;\n    if (fbo) {\n      fbo.texture.delete();\n      fbo.delete();\n    }\n    if (pickingFbo) {\n      pickingFbo.texture.delete();\n      pickingFbo.delete();\n    }\n  }\n}\n\n/**\n * Remove layers that do not overlap with the current terrain cover.\n * This implementation only has effect when a TileLayer is overlaid on top of a TileLayer\n */\nfunction getIntersectingLayers(sourceTile: Tile2DHeader, layers: Layer[]): Layer[] {\n  return layers.filter(layer => {\n    const tile = getTile(layer);\n    if (tile) {\n      return intersect(sourceTile.bbox, tile.bbox);\n    }\n    return true;\n  });\n}\n\n/** If layer is the descendent of a TileLayer, return the corresponding tile. */\nfunction getTile(layer: Layer): Tile2DHeader | null {\n  while (layer) {\n    // @ts-expect-error tile may not exist\n    const {tile} = layer.props;\n    if (tile) {\n      return tile;\n    }\n    layer = layer.parent as Layer;\n  }\n  return null;\n}\n\nfunction intersect(\n  b1: GeoBoundingBox | NonGeoBoundingBox,\n  b2: GeoBoundingBox | NonGeoBoundingBox\n): boolean {\n  if ('west' in b1 && 'west' in b2) {\n    return b1.west < b2.east && b2.west < b1.east && b1.south < b2.north && b2.south < b1.north;\n  }\n  if ('left' in b1 && 'left' in b2) {\n    return b1.left < b2.right && b2.left < b1.right && b1.top < b2.bottom && b2.top < b1.bottom;\n  }\n  return false;\n}\n"],"file":"terrain-cover.js"}